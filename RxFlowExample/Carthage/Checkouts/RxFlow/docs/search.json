{"Protocols/Stepper.html#/steps":{"name":"steps","abstract":"<p>the relay used to emit steps inside this Stepper</p>","parent_name":"Stepper"},"Protocols/Stepper.html#/initialStep":{"name":"initialStep","abstract":"<p>the initial step that will be emitted when listening to this Stepper</p>","parent_name":"Stepper"},"Protocols/Stepper.html#/readyToEmitSteps()":{"name":"readyToEmitSteps()","abstract":"<p>function called when stepper is listened by the FlowCoordinator</p>","parent_name":"Stepper"},"Protocols/Presentable.html#/rxVisible":{"name":"rxVisible","abstract":"<p>Rx Observable that triggers a bool indicating if the current Presentable is being displayed","parent_name":"Presentable"},"Protocols/Presentable.html#/rxDismissed":{"name":"rxDismissed","abstract":"<p>Rx Observable (Single trait) triggered when this presentable is dismissed</p>","parent_name":"Presentable"},"Protocols/Flow.html#/root":{"name":"root","abstract":"<p>the Presentable on which rely the navigation inside this Flow. This method must always give the same instance</p>","parent_name":"Flow"},"Protocols/Flow.html#/adapt(step:)":{"name":"adapt(step:)","abstract":"<p>Adapts an incoming step before the navigate(to:) function</p>","parent_name":"Flow"},"Protocols/Flow.html#/navigate(to:)":{"name":"navigate(to:)","abstract":"<p>Resolves FlowContributors according to the Step, in the context of this very Flow</p>","parent_name":"Flow"},"Protocols/Flow.html":{"name":"Flow","abstract":"<p>A Flow defines a clear navigation area. Combined to a Step it leads to a navigation action</p>"},"Protocols/Presentable.html":{"name":"Presentable","abstract":"<p>An abstraction of what can be presented to the screen. For now, UIViewControllers and Flows are Presentable</p>"},"Protocols.html#/Step":{"name":"Step","abstract":"<p>A Step describes a possible state of navigation inside a Flow</p>"},"Protocols/Stepper.html":{"name":"Stepper","abstract":"<p>a Stepper has only one purpose is: emits Steps that correspond to specific navigation states."},"Protocols.html#/Synchronizable":{"name":"Synchronizable","abstract":"<p>Provides a function to prevent concurrent block execution</p>"},"Extensions/Reactive.html#/dismissed":{"name":"dismissed","abstract":"<p>Rx observable, triggered when the view is being dismissed</p>","parent_name":"Reactive"},"Extensions/Reactive.html#/displayed":{"name":"displayed","abstract":"<p>Rx observable, triggered when the view appearance state changes</p>","parent_name":"Reactive"},"Extensions/Reactive.html#/windowDidAppear":{"name":"windowDidAppear","abstract":"<p>Rx Observable that is triggered once the UIWindow is displayed</p>","parent_name":"Reactive"},"Extensions/Reactive.html#/willNavigate":{"name":"willNavigate","abstract":"<p>Rx Observable emitted before the navigation to a Step within a Flow</p>","parent_name":"Reactive"},"Extensions/Reactive.html#/didNavigate":{"name":"didNavigate","abstract":"<p>Rx Observable emitted after the navigation to a Step within a Flow</p>","parent_name":"Reactive"},"Extensions/ObservableType.html#/pausable(withPauser:)":{"name":"pausable(withPauser:)","abstract":"<p>Pauses the elements of the source observable sequence based on the latest element from the second observable sequence.","parent_name":"ObservableType"},"Extensions/ObservableType.html#/pausable(afterCount:withPauser:)":{"name":"pausable(afterCount:withPauser:)","abstract":"<p>Pauses the elements of the source observable sequence based on the latest element from the second observable sequence.","parent_name":"ObservableType"},"Extensions/ObservableType.html":{"name":"ObservableType"},"Extensions/Reactive.html":{"name":"Reactive"},"Extensions.html#/UIViewController":{"name":"UIViewController"},"Extensions.html#/UIWindow":{"name":"UIWindow"},"Enums/RxFlowStep.html#/home":{"name":"home","abstract":"<p>can be used to express a Flow first step</p>","parent_name":"RxFlowStep"},"Enums/FlowContributors.html#/multiple(flowContributors:)":{"name":"multiple(flowContributors:)","abstract":"<p>a Flow will trigger several FlowContributor at the same time for the same Step</p>","parent_name":"FlowContributors"},"Enums/FlowContributors.html#/one(flowContributor:)":{"name":"one(flowContributor:)","abstract":"<p>a Flow will trigger only one FlowContributor for a Step</p>","parent_name":"FlowContributors"},"Enums/FlowContributors.html#/end(forwardToParentFlowWithStep:)":{"name":"end(forwardToParentFlowWithStep:)","abstract":"<p>a Flow will trigger a special FlowContributor that represents the dismissal of this Flow</p>","parent_name":"FlowContributors"},"Enums/FlowContributors.html#/none":{"name":"none","abstract":"<p>no further navigation will be triggered for a Step</p>","parent_name":"FlowContributors"},"Enums/FlowContributor.html#/contribute(withNextPresentable:withNextStepper:allowStepWhenNotPresented:)":{"name":"contribute(withNextPresentable:withNextStepper:allowStepWhenNotPresented:)","abstract":"<p>the given stepper will emit steps, according to lifecycle of the given presentable, that will contribute to the current Flow","parent_name":"FlowContributor"},"Enums/FlowContributor.html#/forwardToCurrentFlow(withStep:)":{"name":"forwardToCurrentFlow(withStep:)","abstract":"<p>the &ldquo;withStep&rdquo; step will be forwarded to the current flow</p>","parent_name":"FlowContributor"},"Enums/FlowContributor.html#/forwardToParentFlow(withStep:)":{"name":"forwardToParentFlow(withStep:)","abstract":"<p>the &ldquo;withStep&rdquo; step will be forwarded to the parent flow</p>","parent_name":"FlowContributor"},"Enums/FlowContributor.html#/contribute(withNext:)":{"name":"contribute(withNext:)","abstract":"<p>Shortcut static func that returns a .contribute(withNextPresentable: _, withNextStepper: _)","parent_name":"FlowContributor"},"Enums/Flows/ExecuteStrategy.html#/ready":{"name":"ready","parent_name":"ExecuteStrategy"},"Enums/Flows/ExecuteStrategy.html#/created":{"name":"created","parent_name":"ExecuteStrategy"},"Enums/Flows/ExecuteStrategy.html":{"name":"ExecuteStrategy","parent_name":"Flows"},"Enums/Flows.html#/use(_:when:block:)":{"name":"use(_:when:block:)","parent_name":"Flows"},"Enums/Flows.html#/use(_:_:_:_:_:when:block:)":{"name":"use(_:_:_:_:_:when:block:)","abstract":"<p>Allow to be triggered etiher when Flows given as parameters are ready to be displayed or right after their instantiation","parent_name":"Flows"},"Enums/Flows.html#/use(_:_:_:_:when:block:)":{"name":"use(_:_:_:_:when:block:)","abstract":"<p>Allow to be triggered etiher when Flows given as parameters are ready to be displayed or right after their instantiation","parent_name":"Flows"},"Enums/Flows.html#/use(_:_:_:when:block:)":{"name":"use(_:_:_:when:block:)","abstract":"<p>Allow to be triggered etiher when Flows given as parameters are ready to be displayed or right after their instantiation","parent_name":"Flows"},"Enums/Flows.html#/use(_:_:when:block:)":{"name":"use(_:_:when:block:)","abstract":"<p>Allow to be triggered etiher when Flows given as parameters are ready to be displayed or right after their instantiation","parent_name":"Flows"},"Enums/Flows.html":{"name":"Flows","abstract":"<p>Utility functions to synchronize Flows readyness</p>"},"Enums/FlowContributor.html":{"name":"FlowContributor","abstract":"<p>A FlowContributor describes the next thing that will contribute to a Flow.</p>"},"Enums/FlowContributors.html":{"name":"FlowContributors","abstract":"<p>FlowContributors represent the next things that will trigger"},"Enums/RxFlowStep.html":{"name":"RxFlowStep","abstract":"<p>Standard RxFlow Steps</p>"},"Classes/CompositeStepper.html#/steps":{"name":"steps","parent_name":"CompositeStepper"},"Classes/CompositeStepper.html#/init(steppers:)":{"name":"init(steppers:)","abstract":"<p>Initialize</p>","parent_name":"CompositeStepper"},"Classes/CompositeStepper.html#/readyToEmitSteps()":{"name":"readyToEmitSteps()","parent_name":"CompositeStepper"},"Classes/DefaultStepper.html#/init()":{"name":"init()","abstract":"<p>Initialize the DefaultStepper</p>","parent_name":"DefaultStepper"},"Classes/OneStepper.html#/steps":{"name":"steps","parent_name":"OneStepper"},"Classes/OneStepper.html#/init(withSingleStep:)":{"name":"init(withSingleStep:)","abstract":"<p>Initialize the OneStepper</p>","parent_name":"OneStepper"},"Classes/OneStepper.html#/initialStep":{"name":"initialStep","parent_name":"OneStepper"},"Classes/FlowCoordinator.html#/coordinate(flow:with:)":{"name":"coordinate(flow:with:)","abstract":"<p>Execute the navigation of the Flow</p>","parent_name":"FlowCoordinator"},"Classes/FlowCoordinator.html#/navigate(to:)":{"name":"navigate(to:)","abstract":"<p>allow to drive the navigation from the outside of a flow</p>","parent_name":"FlowCoordinator"},"Classes/FlowCoordinator.html":{"name":"FlowCoordinator","abstract":"<p>A FlowCoordinator handles the navigation of a Flow, based on its Stepper and the FlowContributors it emits</p>"},"Classes/OneStepper.html":{"name":"OneStepper","abstract":"<p>A Simple Stepper that has one goal: emit a single Step once initialized</p>"},"Classes/DefaultStepper.html":{"name":"DefaultStepper","abstract":"<p>A Simple Stepper that has one goal: emit a first default step equal to RxFlowStep.home</p>"},"Classes/CompositeStepper.html":{"name":"CompositeStepper","abstract":"<p>A Stepper that combines multiple steppers. All those Steppers will be associated"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}